const ExtendedApiTS = (model: string, withCrud: boolean, apiPrefix: string) => {
  return [
    `import { AxiosRequestConfig } from 'axios';`,
    `import { BaseApi${apiPrefix ? ', apiPrefix' : ''} } from '../BaseApi';`,
    ``,
    `class ${model}Api extends BaseApi {`,
    `  private static instance: ${model}Api;`,
    ``,
    `  private constructor() {`,
    `    super({ baseURL: \`${apiPrefix ? '\${apiPrefix}' : ''}/${model.toLowerCase()}\` });`,
    `  }`,
    ``,
    `  public static getInstance(): ${model}Api {`,
    `    if (!${model}Api.instance) {`,
    `      ${model}Api.instance = new ${model}Api();`,
    `    }`,
    `    return ${model}Api.instance;`,
    `  }`,
    ``,
    ...(withCrud ? [
      `  public get${model}s = (config?: AxiosRequestConfig) => {`,
      `    return this.instance.get('/', config);`,
      `  }`,
      ``,
      `  public get${model} = (id: string, config?: AxiosRequestConfig) => {`,
      `    return this.instance.get(\`/\${id}\`, config);`,
      `  }`,
      ``,
      `  public post${model} = (data: Record<string, any>, config?: AxiosRequestConfig) => {`,
      `    return this.instance.post(\`\`, data, config);`,
      `  }`,
      ``,
      `  public patch${model} = (id: string, data: Record<string, any>, config?: AxiosRequestConfig) => {`,
      `    return this.instance.patch(\`/\${id}\`, data, config);`,
      `  }`,
      ``,
      `  public delete${model} = (id: string, config?: AxiosRequestConfig) => {`,
      `    return this.instance.delete(\`/\${id}\`, config);`,
      `  }`,
    ] : []),
    `}`,
    ``,
    `export { ${model}Api };`,
    ``
  ].join('\n')
}

const ExtendedApiJS = (model: string, withCrud: boolean, apiPrefix: string) => {
  return [
    `import { BaseApi${apiPrefix ? ', apiPrefix' : ''} } from '../BaseApi';`,
    ``,
    `class ${model}Api extends BaseApi {`,
    `  static instance;`,
    ``,
    `  constructor() {`,
    `    super({ baseURL: \`${apiPrefix ? '\${apiPrefix}' : ''}/${model.toLowerCase()}\` });`,
    `  }`,
    ``,
    `  static getInstance() {`,
    `    if (!${model}Api.instance) {`,
    `      ${model}Api.instance = new ${model}Api();`,
    `    }`,
    `    return ${model}Api.instance;`,
    `  }`,
    ``,
    ...(withCrud ? [
      `  get${model}s = (config) => {`,
      `    return this.instance.get('/', config);`,
      `  }`,
      ``,
      `  get${model} = (id, config) => {`,
      `    return this.instance.get(\`/\${id}\`, config);`,
      `  }`,
      ``,
      `  post${model} = (data, config) => {`,
      `    return this.instance.post(\`\`, data, config);`,
      `  }`,
      ``,
      `  patch${model} = (id, data, config) => {`,
      `    return this.instance.patch(\`/\${id}\`, data, config);`,
      `  }`,
      ``,
      `  delete${model} = (id, config) => {`,
      `    return this.instance.delete(\`/\${id}\`, config);`,
      `  }`,
    ] : []),
    `}`,
    ``,
    `export { ${model}Api };`,
    ``
  ].join('\n')
}


export { ExtendedApiTS, ExtendedApiJS }
