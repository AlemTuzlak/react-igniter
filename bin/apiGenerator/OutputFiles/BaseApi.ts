const BaseApiTS = (apiPrefix: string = '') => {
  return [
    `import axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';`,
    ...(apiPrefix ? [`const apiPrefix = '${apiPrefix}'`] : []),
    ``,
    `abstract class BaseApi {`,
    `  protected readonly instance: AxiosInstance;`,
    ``,
    `  public constructor(config: AxiosRequestConfig = {baseURL: \`\${apiPrefix}\`}) {`,
    `    this.instance = axios.create(config);`,
    ``,
    `    this._initializeResponseInterceptor();`,
    `  }`,
    ``,
    `  private _initializeResponseInterceptor = () => {`,
    `    this.instance.interceptors.response.use(`,
    `      this._handleGlobalResponseSuccess,`,
    `      this._handleGlobalResponseError,`,
    `    );`,
    `  }`,
    ``,
    `  private _handleGlobalResponseSuccess = (response: AxiosResponse) => response;`,
    ``,
    `  private _handleGlobalResponseError = (error: AxiosResponse) => {`,
    `    switch (error.status) {`,
    `      case 403:`,
    `        console.log('Unauthorized')`,
    `        break;`,
    `    }`,
    `    return Promise.reject(error);`,
    `  }`,
    `}`,
    ``,
    `export { BaseApi${apiPrefix ? ', apiPrefix' : ''} };`,
    ``
  ].join('\n');
}
const BaseApiJS = (apiPrefix: string = '') => {
  return [
    `import axios from 'axios';`,
    ...(apiPrefix ? [`const apiPrefix = '${apiPrefix}'`] : []),
    ``,
    `class BaseApi {`,
    ``,
    `  constructor(config = {baseURL: \`\${apiPrefix}\`}) {`,
    `    this.instance = axios.create(config);`,
    ``,
    `    this._initializeResponseInterceptor();`,
    `  }`,
    ``,
    `  _initializeResponseInterceptor = () => {`,
    `    this.instance.interceptors.response.use(`,
    `      this._handleGlobalResponseSuccess,`,
    `      this._handleGlobalResponseError,`,
    `    );`,
    `  }`,
    ``,
    `  _handleGlobalResponseSuccess = (response) => response;`,
    ``,
    `  _handleGlobalResponseError = (error) => {`,
    `    switch (error.status) {`,
    `      case 403:`,
    `        console.log('Unauthorized')`,
    `        break;`,
    `    }`,
    `    return Promise.reject(error);`,
    `  }`,
    `}`,
    ``,
    `export { BaseApi${apiPrefix ? ', apiPrefix' : ''} };`,
    ``
  ].join('\n');
}
export { BaseApiTS, BaseApiJS }